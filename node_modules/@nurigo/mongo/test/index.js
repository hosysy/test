/* global describe, it, beforeEach, afterEach */
/**
 * @author Henry Kim <henry@nurigo.net>
 */
const { expect } = require('chai')
const mongo = require('../')
const Test = require('../models/test')
const Message = require('../models/message')
const Group = require('../models/group')

describe('1. mongoose 연결이 잘 되나 확인합니다.', () => {
  beforeEach('커넥션 생성', async () => {
    await mongo.init({
      host: 'localhost',
      database: 'henryTest' + Date.now(),
      reconnectTries: 1000
    })
    await new Message({
      messageId: 'M3V20170911164820TCBLKDEWPAO8VOK',
      groupId: 'GID20170911164820TCBLKDEWPAO8VOK',
      to: '029302266',
      from: '01090683469',
      text: 'test',
      dateCreated: new Date('2017-01-01'),
      statusCode: 'ABadsgadsg12'
    }).save()
    await new Message({
      messageId: 'M3V20170911164820TCBLKDEWPAO8VOZ',
      groupId: 'GID20170911164820TCBLKDEWPAO8VOZ',
      to: '029302266',
      from: '01090683470',
      text: 'test'
    }).save()
    await new Message({
      messageId: 'M3V20170911164820TCBLKDEWPAO8VOX',
      groupId: 'GID20170911164820TCBLKDEWPAO8VOX',
      to: '029302266',
      from: '01090683470',
      text: 'test1'
    }).save()
    await new Group({
      groupId: 'GID20170911164820TCBLKDEWPAO8VOK',
      accountId: 'TEST1',
      apiVersion: 'TEST'
    }).save()
    await new Group({
      groupId: 'GID20170911164820TCBLKDEWPAO8VOZ',
      accountId: 'TEST2',
      apiVersion: 'TEST'
    }).save()
    await new Group({
      groupId: 'GID20170911164820TCBLKDEWPAO8VOX',
      accountId: 'TEST3',
      apiVersion: 'TEST'
    }).save()
  })

  afterEach('커넥션 종료 및 db 삭제', done => {
    mongo.mongoose.connection.db.dropDatabase(done)
  })

  it('1. 연결이 잘 되는가?', done => {
    done()
  })

  it('2. 스키마를 잘 불러오는가?', async () => {
    await new Test({
      key: 'value'
    }).save()
    expect(await Test.find()).to.be.an('array').to.lengthOf(1)
    expect(await Message.find()).to.be.an('array').length.to.be.at.least(1)
  })

  it('3. Message.findByGroupId 가 잘 되는가? ', async () => {
    expect(await Message.findByGroupId('GID20170911164820TCBLKDEWPAO8VOK')).to.be.an('array').lengthOf(1)
  })

  it('4. Message.findByMessageId 가 잘 되는가? ', async () => {
    expect(await Message.findByMessageId('M3V20170911164820TCBLKDEWPAO8VOK')).to.be.an('array').lengthOf(1)
  })

  it('5. Message.query.byObject 가 잘 되는가? ', async () => {
    expect(await Message.find().byObject({ from: '01090683470' })).to.be.an('array').lengthOf(2)
    const a = Message.find()
    a.byObject({ to: '029302266' })
    a.byObject({ text: 'test1' })
    expect(await a).to.be.an('array').lengthOf(1)
    expect(await Message.find().byObject({ to: '029302266', text: 'test1' })).to.be.an('array').lengthOf(1)
  })

  it('6. Message.query.byStatusCode 가 잘 되는가? ', async () => {
    expect(await Message.find().byStatusCode('^AB')).to.be.an('array').lengthOf(1)
    expect(await Message.find().byStatusCode('12$')).to.be.an('array').lengthOf(1)
    expect(await Message.find().byStatusCode('^AB.*12$')).to.be.an('array').lengthOf(1)
    expect(await Message.find().byStatusCode(/^AB/)).to.be.an('array').lengthOf(1)
    expect(await Message.find().byStatusCode(/12$/)).to.be.an('array').lengthOf(1)
    expect(await Message.find().byStatusCode(/^AB.*12$/)).to.be.an('array').lengthOf(1)
  })

  it('7. Group.findByAccountId 가 잘 되는가? ', async () => {
    expect(await Group.findByAccountId('TEST1')).to.be.an('array').lengthOf(1)
  })

  it('8. Group.findOneByGroupId 가 잘 되는가? ', async () => {
    expect((await Group.findOneByGroupId('GID20170911164820TCBLKDEWPAO8VOK')).toObject()).to.be.an('object').to.have.all.keys('_id', 'accountId', 'agent', 'apiVersion', 'count', 'groupId', 'log', 'status')
  })

  it('9. 그룹에 속한 메시지들이 조회가 잘 되는가? ', async () => {
    expect(await (await Group.findOneByGroupId('GID20170911164820TCBLKDEWPAO8VOK')).getMessageList()).to.be.an('array').lengthOf(1)
  })
})
