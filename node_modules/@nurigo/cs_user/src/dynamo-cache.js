'use strict'
/**
 * @author Billy Kang (billy@nurigo.net)
 * 
 * Dynamo cache class 
 * 기존 npmjs 의 dynamo-cache 의 코드를 cs_user 에 맞게 변경함
 */

const _ = require('underscore')
const config = require('../config')
const AWS = require('aws-sdk')
AWS.config.update({
  region: config.region,
  accessKeyId: config.aws_access_key_id,
  secretAccessKey: config.aws_access_secret_key
})

const logger = require('./lib/logger')
const validate = require('./lib/validate')
const util = require('./lib/util')
const RedisProvider = require('./lib/redis-provider')
const MemcachedProvider = require('./lib/memcached-provider')
const InMemoryProvider = require('./lib/inmemory-provider')

const providers = {
  IN_MEMORY: 0,
  REDIS: 1,
  MEMCACHED: 2
}

const defaults = {
  debug: false,
  providerConfig: {
    provider: providers.IN_MEMORY,
    args: []
  },
  ttl: 3, // 초단위
  cache: true
}

const docClient = new AWS.DynamoDB.DocumentClient()

module.exports = class {
  // constructor
  constructor (options, payload) {
    this.cache = undefined
    this.options = _.extend({}, defaults, options)
    this.payload = payload
    this.enabled = this.options.cache
    this.setup()
  }
  // setup
  setup () {
    this.validateOptions()
    this.initCache()
  }
  // enable cache
  enable () {
    this.enabled = true
  }
  // disable cache
  disable () {
    this.enabled = false
  }
  // isEnabled - return enabled value
  isEnabled () {
    return this.enabled
  }
  // delete - dynamodb delete
  delete (params, callback) {
    if (this.enabled) {
      const key = util.hash(util.buildKey(params, this.payload))
      this.cache.remove(key)
    }

    docClient.delete(params, callback)
  }
  // get - dynamodb get
  get (params, callback) {
    if (this.enabled) {
      if (this.options.debug) {
        logger(params)
      }
      const self = this
      const key = util.hash(util.buildKey(params, this.payload))
      this.cache.get(key, function (err, reply) {
        if (err || reply) {
          if (process.env.NODE_ENV === 'test') console.log('cache')
          callback(err, JSON.parse(reply))
        } else {
          if (process.env.NODE_ENV === 'test') console.log('dynamodb')
          docClient.get(params, function (err, data) {
            if (!err) {
              self.cache.put(key, JSON.stringify(data))
            }
            callback(err, data)
          })
        }
      })
    } else {
      if (process.env.NODE_ENV === 'test') console.log('dynamodb')
      docClient.get(params, callback)
    }
  }
  // query - dynamodb query
  query (params, callback) {
    if (this.enabled) {
      const self = this
      const key = util.hash(util.buildKey(params, this.payload))
      this.cache.get(key, function (err, reply) {
        if (err || reply) {
          if (process.env.NODE_ENV === 'test') console.log('cache')
          callback(err, JSON.parse(reply))
        } else {
          if (process.env.NODE_ENV === 'test') console.log('dynamodb')
          docClient.query(params, function (err, data) {
            if (!err) {
              self.cache.put(key, JSON.stringify(data))
            }
            callback(err, data)
          })
        }
      })
    } else {
      if (process.env.NODE_ENV === 'test') console.log('dynamodb')
      docClient.query(params, callback)
    }
  }
  // scan - dynamodb scan
  scan (params, callback) {
    if (this.enabled) {
      const self = this
      const key = util.hash(util.buildKey(params, this.payload))
      this.cache.get(key, function (err, reply) {
        if (err || reply) {
          if (process.env.NODE_ENV === 'test') console.log('cache')
          callback(err, JSON.parse(reply))
        } else {
          if (process.env.NODE_ENV === 'test') console.log('dynamodb')
          docClient.get(params, function (err, data) {
            if (!err) {
              self.cache.put(key, JSON.stringify(data))
            }
            callback(err, data)
          })
        }
      })
    } else {
      if (process.env.NODE_ENV === 'test') console.log('dynamodb')
      docClient.scan(params, callback)
    }
  }
  // validateOptions - provider 의 옵션값이 0~2 인지 검사
  validateOptions () {
    if (this.options.debug) {
      logger('Configuring dynamo-cache with options: ', JSON.stringify(this.options))
    }
    validate.provider(this.options.providerConfig)
  }
  // initCache - provider 옵션값으로 사용할 cache initialize
  initCache () {
    switch (this.options.providerConfig.provider) {
      case providers.IN_MEMORY:
        this.cache = new InMemoryProvider(this.options.providerConfig, this.options.ttl)
        break
      case providers.REDIS:
        this.cache = new RedisProvider(this.options.providerConfig, this.options.ttl)
        break
      case providers.MEMCACHED:
        this.cache = new MemcachedProvider(this.options.providerConfig, this.options.ttl)
        break
      default:
        throw new Error('dynamo-cache: Unknown internal service error')
    }
  }
}
