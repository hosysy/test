/* eslint-disable camelcase */
'use strict'

const config = require('../config')
const DynamoCache = require('./dynamo-cache')
// var docClient = null

module.exports = function (payload, opts) {
  var docClient = new DynamoCache(opts, payload)
  var params = { TableName: config.tableName }
  var { target, value, is_admin } = payload

  if (target === 'user_id') {
    params.KeyConditionExpression = '#user_id = :user_id'
    params.ExpressionAttributeValues = { ':user_id': value }
    params.ExpressionAttributeNames = { '#user_id': 'user_id' }
    params.Select = 'SPECIFIC_ATTRIBUTES'
    params.ProjectionExpression = config.projectExpression
  } else {
    params.KeyConditionExpression = '#member_srl = :member_srl'
    params.ExpressionAttributeValues = { ':member_srl': value }
    params.ExpressionAttributeNames = { '#member_srl': 'member_srl' }
    params.IndexName = 'member_srl-index'
    params.Select = 'SPECIFIC_ATTRIBUTES'
    params.ProjectionExpression = config.projectExpression
  }

  if (is_admin === 'Y') {
    params.Select = 'ALL_ATTRIBUTES'
    delete params.ProjectionExpression
  }

  var response = config.response.getUser(payload)
  return new Promise(function (resolve, reject) {
    docClient.query(params, function (err, data) {
      if (err) {
        response.status = 'Error'
        response.err = err
        return reject(response)
      }

      response.status = 'Success'
      if (data.Count === 0) {
        response.resultCode = 'UserNotExist'
        response.message = '해당 유저가 존재하지 않습니다.'
        return resolve(response)
      }

      response.resultCode = 'UserFound'
      response.data = data.Items[0]
      return resolve(response)
    })
  })
}
