/**
 * vi:set sw=2 ts=2 expandtab:
 */
'use strict'

const AWS = require('aws-sdk')
const config = require('../config.json')
const baseUrl = config.baseUrl

const request = require('request')
const moment = require('moment-timezone')
const HmacMD5 = require('crypto-js').HmacMD5

function getTestToken () {
  let date = moment().tz('Asia/Seoul')
  date = date.format('YYYY-MM-DD HH:mm:ss')

  var credential = {
    'user_id': 'cooltest',
    'account_id': '12925149',
    'password': 'cfe8b92538ad1a3f29f35dd03654086c',
    'date': `"${date}"`,
    'salt': 'a123dab326mcka123xnqqq',
    'signature': ''
  }

  var hmacData = credential.date + credential.salt
  credential.signature = HmacMD5(hmacData, credential.password).toString()

  var token = 'USER '
  var array = []
  delete credential.password
  Object.keys(credential).forEach(function (key) {
    array.push(`${key}=${credential[key]}`)
  })
  token = token + array.join(', ')

  return token
}

function getHeaders (url) {
  return {
    'Authorization': getTestToken()
  }
}

function requestApi (resource, callback, useHeader = false) {
  let url = `${baseUrl}${resource}`
  let headerData = {}
  if (useHeader) headerData = { 'headers': getHeaders() }

  request.get(url, headerData, (error, response, body) => {
    if (error) return callback(error)
    if (response.statusCode !== 200) return callback(body)

    return callback(null, body)
  })
}

function requestApiPost (resource, parameters, callback, useHeader = false) {
  let headerData = {}
  if (useHeader) headerData = getHeaders()

  let data = {
    url: `${baseUrl}${resource}`,
    form: JSON.stringify(parameters),
    headers: headerData
  }

  request.post(data, (error, response, body) => {
    if (error) return callback(error)
    if (response.statusCode !== 200) return callback(body)

    return callback(null, body)
  })
}

function invokeLambda (functionName, payload, callback) {
  let lambda = new AWS.Lambda({
    'region': config.region,
    'version': 'latest',
    'signature': 'v4',
    'accessKeyId': config.awsKey,
    'secretAccessKey': config.awsSecret,
    'http': { 'verify': false }
  })
  if (payload) {
    payload = JSON.stringify(payload)
  }

  let params = {
    'FunctionName': functionName,
    'Payload': payload,
    'LogType': 'Tail',
    'InvocationType': 'RequestResponse'
  }

  lambda.invoke(params, (err, data) => {
    if (err) return callback(err)
    callback(null, JSON.parse(data.Payload))
  })
}

module.exports = {
  request: requestApi,
  requestPost: requestApiPost,
  invoke: invokeLambda
}
